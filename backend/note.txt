        ** Dans adminRoutes.js rajouter : 
        
        "// Valider ou rejeter un utilisateur
        router.patch('/users/:id/validate', verifyToken, authorizeRole('super_admin'), validateUser);"

        ** Dans userController rajouter : 

// Connexion utilisateur (login) avec vérification du statut
  login: async (req, res) => {
    try {
      const { email, password } = req.body;

      // Chercher l'utilisateur
      const user = await UserService.findUserByEmail(email, req.pool);
      if (!user) return res.status(404).json({ message: 'Utilisateur introuvable' });

      // Vérifier si le compte est approuvé
      if (user.status !== 'approved') {
        return res.status(403).json({ message: 'Compte en attente de validation par l’admin' });
      }

      // Vérifier le mot de passe
      const validPassword = await bcrypt.compare(password, user.password);
      if (!validPassword) return res.status(401).json({ message: 'Mot de passe incorrect' });

      // Génération du JWT
      const token = jwt.sign(
        { id: user.id, role: user.role },
        process.env.JWT_SECRET,
        { expiresIn: '1h' }
      );

      res.status(200).json({ token, role: user.role });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },

        ** Dans adminController.js rajouter :

export const validateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body; // 'approved' ou 'rejected'

    if (!['approved','rejected'].includes(status)) {
      return res.status(400).json({ message: 'Status invalide' });
    }

    await db.query('UPDATE users SET status = ? WHERE id = ?', [status, id]);
    res.status(200).json({ message: `Utilisateur ${status}` });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};

